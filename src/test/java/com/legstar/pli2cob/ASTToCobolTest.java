package com.legstar.pli2cob;


/**
 * Test the AST to COBOL translator.
 *
 */
public class ASTToCobolTest extends AbstractTester {

    /**
     * Group single item.
     * @throws CobolFormatException if conversion fails
     */
    public void testGroupItem() throws CobolFormatException {
        translateCheck(
                "Declare 1 Group;",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 Group." + '\n'
                + "" + '\n');
    }

    /**
     * Character single item.
     * @throws CobolFormatException if conversion fails
     */
    public void testCharacterItem() throws CobolFormatException {
        translateCheck(
                "Declare 1 Last char(20);",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 Last PIC X(20)." + '\n'
                + "" + '\n');
    }

    /**
     * Character single item with varying attribute.
     * @throws CobolFormatException if conversion fails
     */
    public void testCharacterVaryingItem() throws CobolFormatException {
        translateCheck(
                "Declare 1 Last char(20) varying;",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 Last." + '\n'
                + "           02 LEN PIC 9(4) BINARY." + '\n'
                + "           02 CHAR PIC X OCCURS 1 TO 20 DEPENDING ON LEN." + '\n'
                + "" + '\n');
    }

    /**
     * Character item C style.
     * @throws CobolFormatException if conversion fails
     */
    public void testCharacterVaryingz() throws CobolFormatException {
        try {
            translateCheck(
                    "Declare 1 Last char(20) varyingz;",

                    "      *" + '\n'
                    + "      * Generated by legstar-pli2cob" + '\n'
                    + "      *" + '\n'
                    + "       01 Last PIC X(20)." + '\n'
                    + "" + '\n');
        } catch (Exception e) {
            assertEquals("Unsupported varying type: VARYINGZ."
                    + " Item=[level : 1,"
                    + " name : Last,"
                    + " qualifiedName : Last,"
                    + " stringType : CHARACTER,"
                    + " length : 20,"
                    + " varying : VARYINGZ,"
                    + " aligned : false]", e.getMessage());
        }
    }

    /**
     * Graphic single item.
     * @throws CobolFormatException if conversion fails
     */
    public void testGraphicItem() throws CobolFormatException {
        translateCheck(
                "Declare 1 Last graphic(20);",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 Last PIC G(20) DISPLAY-1." + '\n'
                + "" + '\n');
    }

    /**
     * Widechar single item.
     * @throws CobolFormatException if conversion fails
     */
    public void testWidecharItem() throws CobolFormatException {
        translateCheck(
                "Declare 1 Last widechar(20);",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 Last PIC N(20)." + '\n'
                + "" + '\n');
    }

    /**
     * BIT strings with length not multiple of 8 are not supported.
     * @throws CobolFormatException if conversion fails
     */
    public void testBitItemNot8Multiple() throws CobolFormatException {
        try {
            translateCheck(
                    "Declare 1 Last bit(20);",

                    "      *" + '\n'
                    + "      * Generated by legstar-pli2cob" + '\n'
                    + "      *" + '\n'
                    + "       01 Last PIC X(20)." + '\n'
                    + "" + '\n');
            fail();
        } catch (CobolFormatException e) {
            assertEquals("Unsupported bit length: 20."
                    + " Item=[level : 1,"
                    + " name : Last,"
                    + " qualifiedName : Last,"
                    + " stringType : BIT,"
                    + " bitLength : 20,"
                    + " length : 3,"
                    + " varying : NONVARYING,"
                    + " aligned : false]",
                    e.getMessage());
        }
    }

    /**
     * BIT strings with length  multiple of 8.
     * @throws CobolFormatException if conversion fails
     */
    public void testBitItem8Multiple() throws CobolFormatException {
        translateCheck(
                "Declare 1 Last bit(32);",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 Last PIC X(4)." + '\n'
                + "" + '\n');
    }

    /**
     * Picture alphabetic single item.
     * @throws CobolFormatException if conversion fails
     */
    public void testPictureAlphabeticItem() throws CobolFormatException {
        translateCheck(
                "Declare 1 Last pic '(5)A9XX';",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 Last PIC A(5)9XX." + '\n'
                + "" + '\n');
    }

    /**
     * Picture numeric single item.
     * @throws CobolFormatException if conversion fails
     */
    public void testPictureNumericItem() throws CobolFormatException {
        translateCheck(
                "Declare 1 Last pic 'ZZV(3)9';",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 Last PIC ZZV9(3)." + '\n'
                + "" + '\n');
    }

    /**
     * Picture numeric with overpunch character.
     * @throws CobolFormatException if conversion fails
     */
    public void testPictureOverpunchItem() throws CobolFormatException {
        translateCheck(
                "Declare 1 Last PIC '(5)9V(2)9T';",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 Last PIC 9(5)V9(2)9." + '\n'
                + "" + '\n');
        translateCheck(
                "Declare 1 Last PIC 'T(4)9V(3)9';",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 Last PIC 99(4)V9(3) LEADING." + '\n'
                + "" + '\n');
        translateCheck(
                "Declare 1 Last PIC '(5)9V(3)9S';",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 Last PIC S9(5)V9(3) SIGN SEPARATE." + '\n'
                + "" + '\n');
        translateCheck(
                "Declare 1 Last PIC 'S(5)9V(3)9';",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 Last PIC S9(5)V9(3) SIGN SEPARATE LEADING." + '\n'
                + "" + '\n');
    }

    /**
     * FLOAT + DECIMAL single float.
     * @throws CobolFormatException if conversion fails
     */
    public void testFloatDecimalItem() throws CobolFormatException {
        translateCheck(
                "Declare 1 A float dec(6);",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 A COMP-1." + '\n'
                + "" + '\n');
    }

    /**
     * FLOAT + DECIMAL double float.
     * @throws CobolFormatException if conversion fails
     */
    public void testDoubleDecimalItem() throws CobolFormatException {
        translateCheck(
                "Declare 1 A float dec(16);",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 A COMP-2." + '\n'
                + "" + '\n');
    }

    /**
     * FLOAT + DECIMAL single item with large precision.
     * @throws CobolFormatException if conversion fails
     */
    public void testFloatDecimalItemTooLarge() throws CobolFormatException {
        try {
            translateCheck(
                    "Declare 1 A float dec(20);",

                    "      *" + '\n'
                    + "      * Generated by legstar-pli2cob" + '\n'
                    + "      *" + '\n'
                    + "       01 Last PIC X(20)." + '\n'
                    + "" + '\n');
            fail();
        } catch (CobolFormatException e) {
            assertEquals("Unsupported precision: 20."
                    + " Item=[level : 1,"
                    + " name : A,"
                    + " qualifiedName : A,"
                    + " scale : FLOAT,"
                    + " base : DECIMAL,"
                    + " signed : true,"
                    + " precision : 20,"
                    + " scaling factor : 0,"
                    + " length : 16,"
                    + " aligned : true]", e.getMessage());
        }
    }

    /**
     * FLOAT + BINARY single float.
     * @throws CobolFormatException if conversion fails
     */
    public void testFloatBinaryItem() throws CobolFormatException {
        translateCheck(
                "Declare 1 A float bin(21);",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 A COMP-1." + '\n'
                + "" + '\n');
    }

    /**
     * FLOAT + BINARY double float.
     * @throws CobolFormatException if conversion fails
     */
    public void testDoubleBinaryItem() throws CobolFormatException {
        translateCheck(
                "Declare 1 A float bin(53);",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 A COMP-2." + '\n'
                + "" + '\n');
    }

    /**
     * FIXED + DECIMAL .
     * @throws CobolFormatException if conversion fails
     */
    public void testFixedDecimalItem() throws CobolFormatException {
        translateCheck(
                "Declare 1 A fixed dec(10,2);",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 A PIC S9(8)V9(2) PACKED-DECIMAL." + '\n'
                + "" + '\n');
    }

    /**
     * FIXED + DECIMAL no decimal part.
     * @throws CobolFormatException if conversion fails
     */
    public void testFixedDecimalNoDecimalsItem() throws CobolFormatException {
        translateCheck(
                "Declare 1 A fixed dec(10);",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 A PIC S9(10) PACKED-DECIMAL." + '\n'
                + "" + '\n');
    }

    /**
     * FIXED + BINARY + SIGNED   PRECISION <= 7 .
     * @throws CobolFormatException if conversion fails
     */
    public void testFixedBinarySignedTinyItem() throws CobolFormatException {
        translateCheck(
                "Declare 1 A fixed bin(7);",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 A PIC X(1)." + '\n'
                + "" + '\n');
    }

    /**
     * FIXED + BINARY + SIGNED   7 < PRECISION <= 15 .
     * @throws CobolFormatException if conversion fails
     */
    public void testFixedBinarySignedShortItem() throws CobolFormatException {
        translateCheck(
                "Declare 1 A fixed bin(15);",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 A PIC S9(4) COMP-5." + '\n'
                + "" + '\n');
    }

    /**
     * FIXED + BINARY + SIGNED   15 < PRECISION <= 31 .
     * @throws CobolFormatException if conversion fails
     */
    public void testFixedBinarySignedIntegerItem() throws CobolFormatException {
        translateCheck(
                "Declare 1 A fixed bin(31);",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 A PIC S9(9) COMP-5." + '\n'
                + "" + '\n');
    }

    /**
     * FIXED + BINARY + SIGNED   31 < PRECISION <= 63 .
     * @throws CobolFormatException if conversion fails
     */
    public void testFixedBinarySignedLongItem() throws CobolFormatException {
        translateCheck(
                "Declare 1 A fixed bin(63);",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 A PIC S9(18) COMP-5." + '\n'
                + "" + '\n');
    }

    /**
     * FIXED + BINARY + UNSIGNED   PRECISION <= 8 .
     * @throws CobolFormatException if conversion fails
     */
    public void testFixedBinaryUnsignedTinyItem() throws CobolFormatException {
        translateCheck(
                "Declare 1 A fixed bin(8) unsigned;",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 A PIC X(1)." + '\n'
                + "" + '\n');
    }

    /**
     * FIXED + BINARY + UNSIGNED   8 < PRECISION <= 16 .
     * @throws CobolFormatException if conversion fails
     */
    public void testFixedBinaryUnsignedShortItem() throws CobolFormatException {
        translateCheck(
                "Declare 1 A fixed bin(16) unsigned;",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 A PIC 9(4) COMP-5." + '\n'
                + "" + '\n');
    }

    /**
     * FIXED + BINARY + UNSIGNED   16 < PRECISION <= 32 .
     * @throws CobolFormatException if conversion fails
     */
    public void testFixedBinaryUnsignedIntegerItem() throws CobolFormatException {
        translateCheck(
                "Declare 1 A fixed bin(32) unsigned;",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 A PIC 9(9) COMP-5." + '\n'
                + "" + '\n');
    }

    /**
     * FIXED + BINARY + UNSIGNED   32 < PRECISION <= 64 .
     * @throws CobolFormatException if conversion fails
     */
    public void testFixedBinaryUnsignedLongItem() throws CobolFormatException {
        translateCheck(
                "Declare 1 A fixed bin(64) unsigned;",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 A PIC 9(18) COMP-5." + '\n'
                + "" + '\n');
    }

    /**
     * Test a simple array with simple dimension.
     * @throws CobolFormatException if conversion fails
     */
    public void testArraySingleDimension() throws CobolFormatException {
        translateCheck(
                "declare List fixed decimal(3) dimension(8);",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 List OCCURS 8 PIC S9(3) PACKED-DECIMAL." + '\n'
                + "" + '\n');
    }

    /**
     * Test an array with a lower bound dimension.
     * @throws CobolFormatException if conversion fails
     */
    public void testArrayLowerBoundDimension() throws CobolFormatException {
        translateCheck(
                "declare List_A dimension(4:11);",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 List-A OCCURS 8." + '\n'
                + "" + '\n');
    }

    /**
     * Test an array with a variable lower bound dimension.
     * @throws CobolFormatException if conversion fails
     */
    public void testArrayUnsupportedLowerBoundDimension() throws CobolFormatException {
        try {
            translateCheck(
                    "declare List_A dimension(4 refer(X):11);",

                    "      *" + '\n'
                    + "      * Generated by legstar-pli2cob" + '\n'
                    + "      *" + '\n'
                    + "       01 List-A OCCURS 8." + '\n'
                    + "" + '\n');
            fail();
        } catch (CobolFormatException e) {
            assertEquals("Unsupported variable lower bound: [bound : 4, refer : X]."
                    + " Item=[level : 1,"
                    + " name : List_A,"
                    + " qualifiedName : List_A,"
                    + " dimensions :"
                    + " [lbound : [bound : 4, refer : X],"
                    + " hbound : [bound : 11]],"
                    + " aligned : true]", e.getMessage());
        }
    }

    /**
     * Test an array with a variable upper bound dimension.
     * @throws CobolFormatException if conversion fails
     */
    public void testArrayVariableUpperBoundDimension() throws CobolFormatException {
        translateCheck(
                "declare List_B dimension(1:11 refer(X));",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 List-B OCCURS 11 DEPENDING X." + '\n'
                + "" + '\n');
    }

    /**
     * Test an array with multiple dimensions.
     * @throws CobolFormatException if conversion fails
     */
    public void testArrayMultipleDimensions() throws CobolFormatException {
        translateCheck(
                "declare Table (4,2) fixed dec (3);",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 Table OCCURS 8 PIC S9(3) PACKED-DECIMAL." + '\n'
                + "" + '\n');
    }

    /**
     * Single branch structure.
     * @throws CobolFormatException if conversion fails
     */
    public void testSingleBranchStructure() throws CobolFormatException {
        translateCheck(
                "Declare 1 Payroll, 4 Name, 5 Last char(20);",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 Payroll." + '\n'
                + "           04 Name." + '\n'
                + "             05 Last PIC X(20)." + '\n'
                + "" + '\n');
    }

    /**
     * Multiple branch structure.
     * @throws CobolFormatException if conversion fails
     */
    public void testMultipleBranchStructure() throws CobolFormatException {
        translateCheck(
                "declare 1 Payroll, /* major structure name */"
                + " 2 Name, /* minor structure name */"
                + "     3 Last char(20), /* elementary name */"
                + "     3 First char(15),"
                + " 2 Hours,"
                + "     3 Regular fixed dec(5,2),"
                + "     3 Overtime fixed dec(5,2),"
                + " 2 Rate,"
                + "     3 Regular fixed dec(3,2),"
                + "     3 Overtime fixed dec(3,2);",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 Payroll." + '\n'
                + "           02 Name." + '\n'
                + "             03 Last PIC X(20)." + '\n'
                + "             03 First PIC X(15)." + '\n'
                + "           02 Hours." + '\n'
                + "             03 Regular PIC S9(3)V9(2) PACKED-DECIMAL." + '\n'
                + "             03 Overtime PIC S9(3)V9(2) PACKED-DECIMAL." + '\n'
                + "           02 Rate." + '\n'
                + "             03 Regular PIC S9(1)V9(2) PACKED-DECIMAL." + '\n'
                + "             03 Overtime PIC S9(1)V9(2) PACKED-DECIMAL." + '\n'
                + "" + '\n');
    }

    /**
     * Test level formatting.
     * @throws Exception if something goes wrong
     */
    public void testFormatCobolLevel() throws Exception {
        ASTToCobol translator = new ASTToCobol(new Pli2CobContext());
        assertEquals("01", translator.formatLevel(1));
        assertEquals("12", translator.formatLevel(12));
        try {
            assertEquals("12", translator.formatLevel(145));
            fail();
        } catch (CobolFormatException e) {
            assertEquals("Level 145 is invalid for COBOL", e.getMessage());
        }
    }

    /**
     * Test name formatting.
     * @throws Exception if something goes wrong
     */
    public void testFormatCobolName() throws Exception {
        ASTToCobol translator = new ASTToCobol(new Pli2CobContext());
        assertEquals("to-5z", translator.formatCobolName("to_5z"));
        assertEquals("a12345678901234567890123456789",
                translator.formatCobolName("a123456789012345678901234567890"));
        assertEquals("to5z", translator.formatCobolName("to5z"));
    }

    /**
     * Test a string item with an INITIAL clause.
     * @throws CobolFormatException if conversion fails
     */
    public void testStringInitial() throws CobolFormatException {
        translateCheck(
                "DCL BASD_STRUC_ID CHAR(4) STATIC INIT('BASD');",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 BASD-STRUC-ID PIC X(4) VALUE 'BASD'." + '\n'
                + "" + '\n');
    }

    /**
     * Test a numeric item with an INITIAL clause.
     * @throws CobolFormatException if conversion fails
     */
    public void testNumericInitial() throws CobolFormatException {
        translateCheck(
                "DCL BASD_LENGTH_CURRENT FIXED BIN(31) INIT(32);",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 BASD-LENGTH-CURRENT PIC S9(9) COMP-5 VALUE 32." + '\n'
                + "" + '\n');
    }

    /**
     * Test a data item name asterisk.
     * @throws CobolFormatException if conversion fails
     */
    public void testAsterisk() throws CobolFormatException {
        translateCheck(
                "Declare 1 Client, 2 * pic '999999';",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 Client." + '\n'
                + "           02 FILLER PIC 999999." + '\n'
                + "" + '\n');
    }

    /**
     * Test a data item name which conflicts with keyword.
     * @throws CobolFormatException if conversion fails
     */
    public void testConflictingName() throws CobolFormatException {
        translateCheck(
                "dcl 1 Initial char(1);",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 Initial PIC X(1)." + '\n'
                + "" + '\n');
    }

    /**
     * Test a a simple union.
     * @throws CobolFormatException if conversion fails
     */
    public void testSimpleUnion() throws CobolFormatException {
        translateCheck(
                "dcl 1 * union, 2 b3 bit(32), 2 b4 bit(16);",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 FILLER." + '\n'
                + "           02 b3 PIC X(4)." + '\n'
                + "           02 b4 REDEFINES b3 PIC X(2)." + '\n'
                + "" + '\n');
    }

    /**
     * Test a a more complex union.
     * @throws CobolFormatException if conversion fails
     */
    public void testComplexUnion() throws CobolFormatException {
        translateCheck(
                "dcl 1 NT2 union static,"
                + "   2 Numeric_translate_table2 char(256),"
                + "   2 Alpha_translate_table2 char(256),"
                + "   2 *,"
                + "     3 * char(46),"
                + "     3 * char(10) init('0123456789'),"
                + "     3 * char(200);",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 NT2." + '\n'
                + "           02 Numeric-translate-table2 PIC X(256)." + '\n'
                + "           02 Alpha-translate-table2 REDEFINES Numeric-translate-table2" + '\n'
                + "           PIC X(256)." + '\n'
                + "           02 FILLER REDEFINES Numeric-translate-table2." + '\n'
                + "             03 FILLER PIC X(46)." + '\n'
                + "             03 FILLER PIC X(10) VALUE '0123456789'." + '\n'
                + "             03 FILLER PIC X(200)." + '\n'
                        + "" + '\n');
    }

    /**
     * Test problematic unions (see http://code.google.com/p/legstar-pli2cob/wiki/PLIToCOBOLUnionVsRedefines).
     * @throws CobolFormatException if conversion fails
     */
    public void testProblematicUnions() throws CobolFormatException {
        translateCheck(
                "dcl 1 a union,"                       
               + "2 b(2) fixed binary(31),"
               + "2 c fixed binary(15);",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 a." + '\n'
                + "           02 b OCCURS 2 PIC S9(9) COMP-5." + '\n'
                + "           02 c REDEFINES b PIC S9(4) COMP-5." + '\n'
                        + "" + '\n');
    }

    /**
     * Test problematic unions (see http://code.google.com/p/legstar-pli2cob/wiki/PLIToCOBOLUnionVsRedefines).
     * @throws CobolFormatException if conversion fails
     */
    public void testProblematicUnions2() throws CobolFormatException {
        translateCheck(
                "dcl 1 a based,"                       
               + "2 b fixed binary(31),"
               + "2 c union,"
               + "3 d,"
               + "4 e(2 REFER(b)) char(1),"
               + "3 f fixed binary(15);",

                "      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n'
                + "       01 a." + '\n'
                + "           02 b PIC S9(9) COMP-5." + '\n'
                + "           02 c." + '\n'
                + "             03 d." + '\n'
                + "               04 e OCCURS 2 DEPENDING b PIC X(1)." + '\n'
                + "             03 f REDEFINES d PIC S9(4) COMP-5." + '\n'
                        + "" + '\n');
    }
    /**
     * See if failonerror parameter is treated properly.
     * @throws CobolFormatException if conversion fails
     */
    public void testFailonerror() throws CobolFormatException {
        Pli2CobContext context = new Pli2CobContext();
        context.setFailonerror(false);
        ASTToCobol translator = new ASTToCobol(context);
        String cobol = translator.translate(parseAndNormalize("dcl A bit(1);"));
        assertEquals("      *" + '\n'
                + "      * Generated by legstar-pli2cob" + '\n'
                + "      *" + '\n', cobol);
    }

}
