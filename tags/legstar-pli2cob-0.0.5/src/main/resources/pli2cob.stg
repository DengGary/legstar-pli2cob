 /*
 * COBOL data descriptions templates.
 *
 * Uses ANTLR StringTemplates http://www.stringtemplate.org/
 */
group pli2cob2;

/*------------------------------------------------------------------
 * -- COBOL fragment templates
*------------------------------------------------------------------*/
cobolFragment(dataItems) ::= <<
      *
      * Generated by legstar-pli2cob
      *
<dataItems>
>>

dataDescription(level,name,redefines,attributes,children) ::= <<
<level> <name><if(redefines)> REDEFINES <redefines><endif><attributes>.
<children>
>>

/*------------------------------------------------------------------
 * -- String templates
 * -- VARYING Strings are turned into arrays
 * -- Variable length strings are turned into arrays with depending
      on clause
*------------------------------------------------------------------*/
stringPicture(stringName,stringType,stringLength,stringDbcs,stringVarying,dependingOn) ::= <<
<if(stringVarying)>
.
<subLevel> LEN PIC 9(4) BINARY.
<subLevel> FILLER PIC <stringType> OCCURS 1 TO <stringLength> DEPENDING LEN OF <stringName>
<else>
<if(dependingOn)>
.
<subLevel> FILLER PIC <stringType> OCCURS 1 TO <stringLength><dependingOn>
<else>
 PIC <stringType><if(stringLength)>(<stringLength>)<endif><if(stringDbcs)> DISPLAY-1<endif>
<endif>
<endif>
>>

/*------------------------------------------------------------------
 * -- REFER template used for both arrays and variable size strings
 * -- REFER translates to a DEPENDING ON clause
*------------------------------------------------------------------*/
dependingOn(dependingOn) ::= <<
 DEPENDING <dependingOn>
>>

/*------------------------------------------------------------------
 * -- Character string defined by a PICTURE clause
*------------------------------------------------------------------*/
pictureValue(picture) ::= <<
 PIC <picture>
>>

/*------------------------------------------------------------------
 * -- Arithmetic items templates
*------------------------------------------------------------------*/
floatUsage(single) ::= <<
<if(single)>
 COMP-1
<else>
 COMP-2
<endif>
>>

packedPictureUsage(integerDigits,fractionDigits) ::= <<
 PIC S9(<integerDigits>)<if(fractionDigits)>V9(<fractionDigits>)<endif> PACKED-DECIMAL
>>

binaryPictureUsage(singleByte,signed,integerDigits) ::= <<
<if(singleByte)>
 PIC X
<else>
 PIC <if(signed)>S<endif>9(<integerDigits>) COMP-5
<endif>
>>

/*------------------------------------------------------------------
 * -- Arrays templates
*------------------------------------------------------------------*/
occurs(maxOccurs,dependingOn) ::= <<
 OCCURS <maxOccurs><dependingOn>
>>

/*------------------------------------------------------------------
 * -- Initial value template
*------------------------------------------------------------------*/
value(initial) ::= <<
 VALUE <initial>
>>
